
#include <iostream>
#include <chrono>
#include <cmath>

template <typename Duration>
class Timer {
public:
    Timer(): begin(std::chrono::steady_clock::now()), last_time(std::chrono::steady_clock::now()
    - std::chrono::steady_clock::now()) {}
    ~Timer() {
        std::cout << "Time is " <<   std::chrono::duration_cast<Duration> (last_time +
        std::chrono::steady_clock::now() - begin).count() << std::endl;
    }
    void pause_timer() {
        //auto now = std::chrono::steady_clock::now();
        last_time += std::chrono::steady_clock::now() - begin;
    }

    void stop_pause_timer() {
        begin = std::chrono::steady_clock::now();
    }
private:
    std::chrono::steady_clock::time_point begin;
    std::chrono::steady_clock::duration last_time;
};

int main() {
    auto sum = 0.;

    Timer<std::chrono::milliseconds> t;
    for(auto i = 0; i < 100000; i++) {
        sum += std::sin(i) + std::cos(i);
    }

    //Cтавим на паузу таймер
    t.pause_timer();
    for(auto i = 0; i < 100000; i++) {
        sum += std::sin(i) + std::cos(i);
    }
    //Снимаем с паузы таймер
    //В данной реализации таймера метод stop_pause_timer обязателен
    //после того, как мы восспользовались pause_timer

    t.stop_pause_timer();
    std::cout << "Sum is " << sum << std::endl;
    return 0;
}
