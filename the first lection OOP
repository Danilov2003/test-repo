

class Train
{
public:
    double m;
    double x = 0;
    double v = 0;
    // Создать паровоз массой m,
    // стоящий в начале координат
    Train(double m){
        this-> m = m;
    };

    // Ехать с текущей скоростью в течение времени dt
    void move(double dt) {
        double S = v*dt;
        x = x + S;
    }

    // Изменить полный импульс паровоза (p = mv) на dp
    // Изменение может менять знак скорости
    void accelerate(double dp) {
        double V = dp/m + v;
        v = V;

    }

    // Получить текущую координату паровоза
    double getX() {
        return x;
    }
};

______________________________________________________________
______________________________________________________________



class GasHolder
{
public:

    float V;
    float T;
    float P;
    const float R = 8.31;
    //std::vector<float> ms;
    //std::vector<float> Ms;
    float ms[10000];
    float Ms[10000];
    int index = 0;
    // Создать газгольдер заданного объёма.
    // Температура созданного термостата равна 273 К.
    GasHolder(float v) {
        V = v;
        T = 273;
        P = 0;

    };

    // Уничтожить газгольдер.
    ~GasHolder() {};

    // Впрыск порции газа массой m и молярной массой M.
    // Считать, что газ принимает текущую температуру газгольдера за пренебрежимо малое время.
    void inject(float m, float M) {
        P = P + (m * R * T)/(V * M);
        ms[index] = m;
        Ms[index] = M;
        index++;
    }

    // Подогреть газгольдер на dT градусов.
    // Считать, что нагрев возможен до любых значений температуры.
    void heat(float dT){
        T = T + dT;
        float dp = 0;
        for (int i = 0; i < index; i++) {
            dp =  dp + (ms[i] * R * dT)/(V * Ms[i]);
        }
        P = P + dp;
    }

    // Охладить газгольдер на dT градусов.
    // При попытке охладить ниже 0 К температура становится ровно 0 К.
    void cool(float dT) {
        float new_T = T - dT;
        if (new_T <= 0) {
            T = 0;
            P = 0;
        } else {
            T = new_T;
            float dp = 0;
            for (int i = 0; i < index; i++) {
                dp =  dp + (ms[i] * R * dT)/(V * Ms[i]);
            }
            P = P - dp;
    }}

    // Получить текущее давление в газгольдере.
    // Считать, что для газа верно уравнение состояния PV = (m/M)RT.
    // Значение постоянной R принять 8.31 Дж/(моль*К).
    float getPressure() {
        return P;
    }
};
