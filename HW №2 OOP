
#include <iostream>
#include <cmath>
#include <vector>


class Figure {
public:
    virtual double area() = 0;
    virtual double perimeter() = 0;
    virtual void getInformation() = 0;
    virtual ~Figure() {};

protected:
    std::string name;
};

class Circle: public Figure {
public:
    Circle(double r): r(r) {
        name = "Круг";
    };
    double area() override {
        return std::acos(-1) * r * r;
    }
    double perimeter() override {
        return 2 * std::acos(-1) * r;
    }
    void getInformation() override {
        std::cout << name << ":  " << std::endl;
        std::cout << "Радиус: " << r << std::endl;
    }
private:
    double r;
};

class Ellipse : public Figure {
private:
    double a;
    double b;

public:
    Ellipse(double a, double b): a(a), b(b) {
        name = "Эллипс";
    };

    double area() override{
        return std::acos(-1) * a * b;
    }

    double perimeter() override {
        return 2 * std::acos(-1) * std::sqrt((a*a + b*b)/2);
    }
    void getInformation() override {
        std::cout << name << ":  " << std::endl;
        std::cout << "Большая полуось: " << a << ";  Малая полуось: " << b << std::endl;
    }
};

class Polygon: public Figure {
protected:
    int value;  // количество вершин многоугольник
    
public:
    Polygon() {};
    Polygon(int value): value(value) {
    };

};

class Quadrilateral : public Polygon {
public:
    Quadrilateral() {
        value = 4;
    }
};

class Rectangle: public Quadrilateral {
public:
    Rectangle(double a, double b): a(a), b(b) {
        name = "Прямоугольник";
    }
    double area() override {
        return a * b;
    }
    double perimeter() override {
        return 2 * (a + b);
    }

    void getInformation() override {
        std::cout << name << ": " << std::endl;
        std::cout << "Количество вершин: " << value << ";  Длины сторон: " << a << ", " << b << std::endl;
    }

private:
    double a, b;
};

class Square: public Rectangle {
public:
    Square(double a) : Rectangle(a, a) {
        name = "Квадрат";
    }
};

class Triangle: public Polygon {
private:
    double a, b, c;

public:
    Triangle(double a, double b, double c): a(a), b(b), c(c) {
        value = 3;
        name = "Треугольник";
    };

    double perimeter() override {
        return a + b + c;
    }

    double area() override {
        double p = (a + b + c)/2;
        return std::sqrt(p * (p - a) * (p - b) * (p - c));
    }

    void getInformation() override {
        std::cout << name << ": " << std::endl;
        std::cout << "Количество вершин: " << value << ";  Длины сторон: " << a << ", " << b <<
        ", " << c << std::endl;
    }
};

int main () {

    system("chcp 65001");

    Ellipse e(10, 2);
    //e.getInformation();

    Circle c(25);
    //c.getInformation();

    Triangle t (16, 17, 18);
    //t.getInformation();

    Rectangle r (12, 24);
    //r.getInformation();

    Square s(4);
    //s.getInformation();

    //std::cout<<s.perimeter();

   std::vector<Figure*> figures;
   figures.push_back(&e);
    figures.push_back(&c);
    figures.push_back(&t);
    figures.push_back(&r);
    figures.push_back(&s);

    std::cout<< std::endl;
    for(auto ptr: figures) {
        std::cout << "Information: "; ptr->getInformation();
        std::cout << "Area is " << ptr->area() << std::endl;
        std::cout << "Perimeter is " << ptr->perimeter() << std::endl << std::endl;
   }
    return 0;
}

